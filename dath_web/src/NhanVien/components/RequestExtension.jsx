import React, { useState } from "react";
import "../assets/css/emp_requestextension.css";
import sidebarIcon from "../assets/img/emp_managedocs_icondanhmuc.svg";

const RequestExtension = () => {
  const [sortStates, setSortStates] = useState([true, true, true, true, true]);
  const [filterStatus, setFilterStatus] = useState("T·∫•t c·∫£");
  const [rows, setRows] = useState([
    {
      cccd: "079201200124",
      bookId: "MT1003",
      bookName: "Gi·∫£i t√≠ch 1",
      initialReturnDate: "05/02/2024",
      extendedReturnDate: "01/03/2024",
      status: "ƒê√£ x·ª≠ l√Ω",
    },
    {
      cccd: "091343356418",
      bookId: "MT2013",
      bookName: "X√°c su·∫•t th·ªëng k√™",
      initialReturnDate: "12/03/2024",
      extendedReturnDate: "11/04/2024",
      status: "Ch∆∞a x·ª≠ l√Ω",
    },
    {
      cccd: "063789012345",
      bookId: "CH1003",
      bookName: "H√≥a ƒë·∫°i c∆∞∆°ng",
      initialReturnDate: "20/04/2024",
      extendedReturnDate: "19/05/2024",
      status: "Ch∆∞a x·ª≠ l√Ω",
    },
    {
      cccd: "035456789012",
      bookId: "PH1007",
      bookName: "Th√≠ nghi·ªám v·∫≠t l√Ω",
      initialReturnDate: "03/05/2024",
      extendedReturnDate: "01/06/2024",
      status: "Ch∆∞a x·ª≠ l√Ω",
    },
    {
      cccd: "098765432109",
      bookId: "SP1035",
      bookName: "Ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc",
      initialReturnDate: "11/06/2024",
      extendedReturnDate: "14/08/2024",
      status: "ƒê√£ x·ª≠ l√Ω",
    },
    {
        cccd: "052345678901",
        bookId: "IM1025",
        bookName: "Qu·∫£n l√Ω d·ª± √°n cho k·ªπ s∆∞",
        initialReturnDate: "23/08/2024",
        extendedReturnDate: "22/09/2024",
        status: "Ch∆∞a x·ª≠ l√Ω",
    },
    {
        cccd: "089012302137",
        bookId: "CO2013",
        bookName: "H·ªá c∆° s·ªü d·ªØ li·ªáu",
        initialReturnDate: "30/09/2024",
        extendedReturnDate: "29/10/2024",
        status: "Ch∆∞a x·ª≠ l√Ω",
    },
    {
        cccd: "098033432346",
        bookId: "CO3001",
        bookName: "C√¥ng ngh·ªá ph·∫ßn m·ªÅm",
        initialReturnDate: "15/07/2024",
        extendedReturnDate: "13/09/2024",
        status: "ƒê√£ x·ª≠ l√Ω",
    },
    {
        cccd: "089012345678",
        bookId: "AS3077",
        bookName: "C∆° s·ªü v·∫≠t l√Ω s·ª£i quang h·ªçc v√† ·ª©ng d·ª•ng",
        initialReturnDate: "18/08/2024",
        extendedReturnDate: "28/08/2024",
        status: "Ch∆∞a x·ª≠ l√Ω",
    },
    {
        cccd: "090123456789",
        bookId: "TR3077",
        bookName: "Th√≠ nghi·ªám k·ªπ thu·∫≠t h√†ng kh√¥ng 1",
        initialReturnDate: "14/12/2024",
        extendedReturnDate: "26/12/2024",
        status: "Ch∆∞a x·ª≠ l√Ω",
    },
    {
        cccd: "078901234567",
        bookId: "ME3005",
        bookName: "Thi·∫øt k·∫ø h·ªá th·ªëng c∆° ƒëi·ªán t·ª≠",
        initialReturnDate: "10/07/2024",
        extendedReturnDate: "09/08/2024",
        status: "Ch∆∞a x·ª≠ l√Ω",
    },
    {
        cccd: "093456789012",
        bookId: "EE2009",
        bookName: "H·ªá th·ªëng m√°y t√≠nh v√† ng√¥n ng·ªØ l·∫≠p tr√¨nh",
        initialReturnDate: "06/12/2024",
        extendedReturnDate: "10/01/2025",
        status: "Ch∆∞a x·ª≠ l√Ω",
    },

  ]);

  // H√†m s·∫Øp x·∫øp
  const sortTable = (columnIndex, isDate = false) => {
    const sortedRows = [...rows];
    const sortDirection = sortStates[columnIndex];
    setSortStates((prev) => {
      const newSortStates = [...prev];
      newSortStates[columnIndex] = !sortDirection;
      return newSortStates;
    });

    sortedRows.sort((a, b) => {
      const cellA = Object.values(a)[columnIndex];
      const cellB = Object.values(b)[columnIndex];
      if (isDate) {
        const dateA = new Date(cellA.split("/").reverse().join("-"));
        const dateB = new Date(cellB.split("/").reverse().join("-"));
        return sortDirection ? dateA - dateB : dateB - dateA;
      } else {
        return sortDirection
          ? cellA.localeCompare(cellB, "vi", { numeric: true })
          : cellB.localeCompare(cellA, "vi", { numeric: true });
      }
    });

    setRows(sortedRows);
  };

  // H√†m l·ªçc tr·∫°ng th√°i
  const filterTableByStatus = () => {
    if (filterStatus === "T·∫•t c·∫£") return rows;
    return rows.filter((row) =>
      filterStatus === "ƒê√£ x·ª≠ l√Ω"
        ? row.status === "ƒê√£ x·ª≠ l√Ω"
        : row.status === "Ch∆∞a x·ª≠ l√Ω"
    );
  };

  // X·ª≠ l√Ω y√™u c·∫ßu duy·ªát/t·ª´ ch·ªëi
  const processRequest = (index, action) => {
    const updatedRows = [...rows];
    updatedRows[index].status = "ƒê√£ x·ª≠ l√Ω";
    setRows(updatedRows);
    alert(
      action === "approve"
        ? "Y√™u c·∫ßu gia h·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát"
        : "Y√™u c·∫ßu gia h·∫°n b·ªã t·ª´ ch·ªëi"
    );
  };

  return (
    <div className="main-container">
      {/* Sidebar */}
      <aside className="sidebar">
        <h3>
          <img src={sidebarIcon} alt="Danh m·ª•c Icon" className="icon" />
          DANH M·ª§C
        </h3>
        <ul>
          <li>
            <a href="/borrow-register">ƒêƒÉng k√Ω m∆∞·ª£n</a>
          </li>
          <li>
            <a href="/request-extension">Y√™u c·∫ßu gia h·∫°n</a>
          </li>
          <li>
            <a href="/book-return">X√°c nh·∫≠n tr·∫£ s√°ch</a>
          </li>
          <li>
            <a href="/overdue-notice">Th√¥ng b√°o qu√° h·∫°n</a>
          </li>
        </ul>
      </aside>

      {/* Content */}
      <section className="content">
        <h2>Y√äU C·∫¶U GIA H·∫†N</h2>

        <div className="loan-table-container">
          <table className="loan-table" id="loan-table">
            <thead>
              <tr>
                <th>
                  CCCD{" "}
                  <span
                    className="filter-icon"
                    onClick={() => sortTable(0)}
                  >
                    üîΩ
                  </span>
                </th>
                <th>
                  ID s√°ch{" "}
                  <span
                    className="filter-icon"
                    onClick={() => sortTable(1)}
                  >
                    üîΩ
                  </span>
                </th>
                <th>
                  T√™n s√°ch{" "}
                  <span
                    className="filter-icon"
                    onClick={() => sortTable(2)}
                  >
                    üîΩ
                  </span>
                </th>
                <th>
                  Ng√†y h·∫πn tr·∫£ ban ƒë·∫ßu{" "}
                  <span
                    className="filter-icon"
                    onClick={() => sortTable(3, true)}
                  >
                    üîΩ
                  </span>
                </th>
                <th>
                  Ng√†y h·∫πn tr·∫£ gia h·∫°n{" "}
                  <span
                    className="filter-icon"
                    onClick={() => sortTable(4, true)}
                  >
                    üîΩ
                  </span>
                </th>
                <th>
                  X·ª≠ l√Ω y√™u c·∫ßu
                  <select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                  >
                    <option value="T·∫•t c·∫£">T·∫•t c·∫£</option>
                    <option value="ƒê√£ x·ª≠ l√Ω">ƒê√£ x·ª≠ l√Ω</option>
                    <option value="Duy·ªát | T·ª´ ch·ªëi">Ch∆∞a x·ª≠ l√Ω</option>
                  </select>
                </th>
              </tr>
            </thead>
            <tbody>
              {filterTableByStatus().map((row, index) => (
                <tr key={index}>
                  <td>{row.cccd}</td>
                  <td>{row.bookId}</td>
                  <td>{row.bookName}</td>
                  <td>{row.initialReturnDate}</td>
                  <td>{row.extendedReturnDate}</td>
                  <td className={`status ${row.status === "ƒê√£ x·ª≠ l√Ω" ? "processed" : "approved-rejected"}`}>
                    {row.status === "Ch∆∞a x·ª≠ l√Ω" ? (
                      <>
                        <span
                          className="approve"
                          onClick={() => processRequest(index, "approve")}
                        >
                          Duy·ªát
                        </span>{" "}
                        |{" "}
                        <span
                          className="reject"
                          onClick={() => processRequest(index, "reject")}
                        >
                          T·ª´ ch·ªëi
                        </span>
                      </>
                    ) : (
                      row.status
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    </div>
  );
};

export default RequestExtension;
